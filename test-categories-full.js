/**
 * –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ö–ê–¢–ï–ì–û–†–ò–ô
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ë–î
 */

const BASE_URL = 'http://localhost:3000'

console.log('üß™ –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ö–ê–¢–ï–ì–û–†–ò–ô\n')
console.log('='.repeat(70))

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testCategory = {
	name: 'TEST_CATEGORY_' + Date.now(),
	icon: '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1"><rect x="4" y="4" width="16" height="16" rx="1"/></svg>',
	description: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞',
}

let createdCategoryId = null

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = ms => new Promise(resolve => setTimeout(resolve, ms))

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
const logResult = (test, success, details = '') => {
	const icon = success ? '‚úÖ' : '‚ùå'
	console.log(`${icon} ${test}`)
	if (details) console.log(`   ${details}`)
}

// ============================================================================
// –¢–ï–°–¢ 1: –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ô
// ============================================================================
async function test1_GetAllCategories() {
	console.log('\nüìã –¢–ï–°–¢ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
	console.log('-'.repeat(70))

	try {
		const response = await fetch(`${BASE_URL}/api/product-categories`)
		const categories = await response.json()

		if (response.ok && Array.isArray(categories)) {
			logResult(
				'GET /api/product-categories',
				true,
				`–ù–∞–π–¥–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`
			)
			console.log('   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', categories.map(c => c.name).join(', '))
			return { success: true, data: categories }
		} else {
			logResult('GET /api/product-categories', false, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞')
			return { success: false }
		}
	} catch (error) {
		logResult('GET /api/product-categories', false, error.message)
		return { success: false }
	}
}

// ============================================================================
// –¢–ï–°–¢ 2: –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ô –ö–ê–¢–ï–ì–û–†–ò–ò
// ============================================================================
async function test2_CreateCategory() {
	console.log('\n‚ûï –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
	console.log('-'.repeat(70))

	try {
		const response = await fetch(`${BASE_URL}/api/product-categories`, {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(testCategory),
		})

		if (response.ok) {
			const newCategory = await response.json()
			createdCategoryId = newCategory.id

			logResult(
				'POST /api/product-categories',
				true,
				`ID: ${newCategory.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${newCategory.name}`
			)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è
			const fieldsOk =
				newCategory.name === testCategory.name &&
				newCategory.icon === testCategory.icon &&
				newCategory.description === testCategory.description &&
				newCategory.isActive === true

			logResult('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', fieldsOk)

			return { success: true, data: newCategory }
		} else {
			const error = await response.json()
			logResult('POST /api/product-categories', false, error.error)
			return { success: false }
		}
	} catch (error) {
		logResult('POST /api/product-categories', false, error.message)
		return { success: false }
	}
}

// ============================================================================
// –¢–ï–°–¢ 3: –ü–û–õ–£–ß–ï–ù–ò–ï –û–î–ù–û–ô –ö–ê–¢–ï–ì–û–†–ò–ò –ü–û ID
// ============================================================================
async function test3_GetCategoryById() {
	console.log('\nüîç –¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID')
	console.log('-'.repeat(70))

	if (!createdCategoryId) {
		logResult('GET /api/product-categories/[id]', false, '–ù–µ—Ç ID –¥–ª—è —Ç–µ—Å—Ç–∞')
		return { success: false }
	}

	try {
		const response = await fetch(
			`${BASE_URL}/api/product-categories/${createdCategoryId}`
		)

		if (response.ok) {
			const category = await response.json()

			logResult(
				`GET /api/product-categories/${createdCategoryId}`,
				true,
				`–ù–∞–∑–≤–∞–Ω–∏–µ: ${category.name}`
			)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç
			const idMatches = category.id === createdCategoryId
			logResult('–ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', idMatches)

			return { success: true, data: category }
		} else {
			logResult(
				'GET /api/product-categories/[id]',
				false,
				'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
			)
			return { success: false }
		}
	} catch (error) {
		logResult('GET /api/product-categories/[id]', false, error.message)
		return { success: false }
	}
}

// ============================================================================
// –¢–ï–°–¢ 4: –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò
// ============================================================================
async function test4_UpdateCategory() {
	console.log('\n‚úèÔ∏è –¢–ï–°–¢ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
	console.log('-'.repeat(70))

	if (!createdCategoryId) {
		logResult('PUT /api/product-categories/[id]', false, '–ù–µ—Ç ID –¥–ª—è —Ç–µ—Å—Ç–∞')
		return { success: false }
	}

	const updatedData = {
		name: testCategory.name + '_UPDATED',
		icon: testCategory.icon,
		description: '–û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
	}

	try {
		const response = await fetch(
			`${BASE_URL}/api/product-categories/${createdCategoryId}`,
			{
				method: 'PUT',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(updatedData),
			}
		)

		if (response.ok) {
			const updated = await response.json()

			logResult(
				`PUT /api/product-categories/${createdCategoryId}`,
				true,
				`–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${updated.name}`
			)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
			const dataUpdated =
				updated.name === updatedData.name &&
				updated.description === updatedData.description

			logResult('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', dataUpdated)

			return { success: true, data: updated }
		} else {
			const error = await response.json()
			logResult('PUT /api/product-categories/[id]', false, error.error)
			return { success: false }
		}
	} catch (error) {
		logResult('PUT /api/product-categories/[id]', false, error.message)
		return { success: false }
	}
}

// ============================================================================
// –¢–ï–°–¢ 5: –ê–ö–¢–ò–í–ê–¶–ò–Ø/–î–ï–ê–ö–¢–ò–í–ê–¶–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ò
// ============================================================================
async function test5_ToggleActiveStatus() {
	console.log('\nüëÅÔ∏è –¢–ï–°–¢ 5: –ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
	console.log('-'.repeat(70))

	if (!createdCategoryId) {
		logResult('Toggle isActive', false, '–ù–µ—Ç ID –¥–ª—è —Ç–µ—Å—Ç–∞')
		return { success: false }
	}

	try {
		// –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
		const deactivate = await fetch(
			`${BASE_URL}/api/product-categories/${createdCategoryId}`,
			{
				method: 'PUT',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ isActive: false }),
			}
		)

		if (deactivate.ok) {
			const deactivated = await deactivate.json()
			logResult('–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', deactivated.isActive === false)
		} else {
			logResult('–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', false)
			return { success: false }
		}

		await delay(500)

		// –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ
		const activate = await fetch(
			`${BASE_URL}/api/product-categories/${createdCategoryId}`,
			{
				method: 'PUT',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ isActive: true }),
			}
		)

		if (activate.ok) {
			const activated = await activate.json()
			logResult('–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', activated.isActive === true)
			return { success: true }
		} else {
			logResult('–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', false)
			return { success: false }
		}
	} catch (error) {
		logResult('Toggle isActive', false, error.message)
		return { success: false }
	}
}

// ============================================================================
// –¢–ï–°–¢ 6: –ü–†–û–í–ï–†–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –í –ö–û–ù–§–ò–ì–£–†–ê–¢–û–†–ï
// ============================================================================
async function test6_CheckConfiguratorIntegration() {
	console.log('\nüîß –¢–ï–°–¢ 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–æ–º')
	console.log('-'.repeat(70))

	try {
		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		const response = await fetch(`${BASE_URL}/api/product-categories`)
		const categories = await response.json()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—à–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
		const ourCategory = categories.find(c => c.id === createdCategoryId)

		if (ourCategory) {
			logResult(
				'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–µ',
				true,
				`–°—Ç–∞—Ç—É—Å: ${ourCategory.isActive ? '–∞–∫—Ç–∏–≤–Ω–∞' : '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'}`
			)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∫–æ–Ω–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
			const hasIcon = ourCategory.icon && ourCategory.icon.includes('<svg')
			logResult('–ò–∫–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', hasIcon)

			return { success: true }
		} else {
			logResult('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–µ', false, '–ù–µ –Ω–∞–π–¥–µ–Ω–∞')
			return { success: false }
		}
	} catch (error) {
		logResult('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–æ–º', false, error.message)
		return { success: false }
	}
}

// ============================================================================
// –¢–ï–°–¢ 7: –£–î–ê–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò
// ============================================================================
async function test7_DeleteCategory() {
	console.log('\nüóëÔ∏è –¢–ï–°–¢ 7: –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
	console.log('-'.repeat(70))

	if (!createdCategoryId) {
		logResult('DELETE /api/product-categories/[id]', false, '–ù–µ—Ç ID –¥–ª—è —Ç–µ—Å—Ç–∞')
		return { success: false }
	}

	try {
		const response = await fetch(
			`${BASE_URL}/api/product-categories/${createdCategoryId}`,
			{
				method: 'DELETE',
			}
		)

		if (response.ok) {
			logResult(`DELETE /api/product-categories/${createdCategoryId}`, true)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–∞
			await delay(500)

			const checkResponse = await fetch(
				`${BASE_URL}/api/product-categories/${createdCategoryId}`
			)

			if (checkResponse.status === 404) {
				logResult('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å 404)', true)
				return { success: true }
			} else {
				logResult('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è', false, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—Å—ë –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
				return { success: false }
			}
		} else {
			const error = await response.json()
			logResult('DELETE /api/product-categories/[id]', false, error.error)
			return { success: false }
		}
	} catch (error) {
		logResult('DELETE /api/product-categories/[id]', false, error.message)
		return { success: false }
	}
}

// ============================================================================
// –¢–ï–°–¢ 8: –ü–†–û–í–ï–†–ö–ê –ó–ê–©–ò–¢–´ –û–¢ –£–î–ê–õ–ï–ù–ò–Ø –°–í–Ø–ó–ê–ù–ù–´–• –ö–ê–¢–ï–ì–û–†–ò–ô
// ============================================================================
async function test8_CheckDeleteProtection() {
	console.log('\nüõ°Ô∏è –¢–ï–°–¢ 8: –ó–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
	console.log('-'.repeat(70))

	try {
		// –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		const response = await fetch(`${BASE_URL}/api/product-categories`)
		const categories = await response.json()

		// –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏
		const categoryWithSuppliers = categories.find(
			c => c.supplierCategories && c.supplierCategories.length > 0
		)

		if (!categoryWithSuppliers) {
			logResult(
				'–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã',
				true,
				'–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∞'
			)
			return { success: true }
		}

		// –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏
		const deleteResponse = await fetch(
			`${BASE_URL}/api/product-categories/${categoryWithSuppliers.id}`,
			{
				method: 'DELETE',
			}
		)

		if (deleteResponse.status === 400) {
			const error = await deleteResponse.json()
			logResult(
				'–ó–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
				true,
				error.error || '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'
			)
			return { success: true }
		} else {
			logResult(
				'–ó–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
				false,
				'–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!'
			)
			return { success: false }
		}
	} catch (error) {
		logResult('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã', false, error.message)
		return { success: false }
	}
}

// ============================================================================
// –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í
// ============================================================================
async function runAllTests() {
	const results = []

	results.push(await test1_GetAllCategories())
	await delay(500)

	results.push(await test2_CreateCategory())
	await delay(500)

	results.push(await test3_GetCategoryById())
	await delay(500)

	results.push(await test4_UpdateCategory())
	await delay(500)

	results.push(await test5_ToggleActiveStatus())
	await delay(500)

	results.push(await test6_CheckConfiguratorIntegration())
	await delay(500)

	results.push(await test7_DeleteCategory())
	await delay(500)

	results.push(await test8_CheckDeleteProtection())

	// –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	console.log('\n' + '='.repeat(70))
	console.log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø')
	console.log('='.repeat(70))

	const totalTests = results.length
	const passedTests = results.filter(r => r.success).length
	const failedTests = totalTests - passedTests

	console.log(`\n‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}/${totalTests}`)
	console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests}/${totalTests}`)

	if (failedTests === 0) {
		console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!')
		console.log('‚ú® –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞!')
	} else {
		console.log('\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!')
		console.log('üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.')
	}

	console.log('\n' + '='.repeat(70))
}

// –ó–∞–ø—É—Å–∫
runAllTests().catch(error => {
	console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error)
	process.exit(1)
})
