// Comprehensive test for the Parameter System
const BASE_URL = 'http://localhost:3000'

async function testParameterSystem() {
	console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–ê–†–ê–ú–ï–¢–†–û–í')
	console.log('='.repeat(60))

	// Test 1: Get all parameters
	console.log('\nüìã –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...')
	const paramsResponse = await fetch(`${BASE_URL}/api/parameters`)
	const parameters = await paramsResponse.json()
	console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ${parameters.length}`)
	parameters.forEach(p => {
		console.log(`   - ${p.name} (${p.nameIt}) - ${p.type}`)
		console.log(`     –ó–Ω–∞—á–µ–Ω–∏–π: ${p.values?.length || 0}`)
	})

	// Test 2: Get parameters for a specific category
	console.log('\nüîó –¢–µ—Å—Ç 2: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–û–∫–Ω–∞"...')
	const categoriesResponse = await fetch(`${BASE_URL}/api/product-categories`)
	const categories = await categoriesResponse.json()
	const windowCategory = categories.find(
		c =>
			c.name.toLowerCase().includes('–æ–∫–Ω') ||
			c.name.toLowerCase().includes('finestre')
	)

	if (windowCategory) {
		console.log(
			`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${windowCategory.name} (ID: ${windowCategory.id})`
		)
		const categoryParamsResponse = await fetch(
			`${BASE_URL}/api/category-parameters?categoryId=${windowCategory.id}`
		)
		const categoryParams = await categoryParamsResponse.json()
		console.log(`‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryParams.length}`)
		categoryParams.forEach(cp => {
			const required = cp.isRequired ? 'üî¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π' : '‚ö™ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π'
			console.log(`   - ${cp.parameter.nameIt} (${required})`)
			if (cp.parameter.values && cp.parameter.values.length > 0) {
				console.log(
					`     –ó–Ω–∞—á–µ–Ω–∏—è: ${cp.parameter.values.map(v => v.valueIt).join(', ')}`
				)
			}
		})
	}

	// Test 3: Test parameter creation
	console.log('\n‚ûï –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞...')
	const newParamResponse = await fetch(`${BASE_URL}/api/parameters`, {
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		body: JSON.stringify({
			name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä',
			nameIt: 'Parametro di test',
			type: 'SELECT',
			description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
			values: [
				{ value: '–í–∞—Ä–∏–∞–Ω—Ç 1', valueIt: 'Opzione 1', order: 0 },
				{ value: '–í–∞—Ä–∏–∞–Ω—Ç 2', valueIt: 'Opzione 2', order: 1 },
			],
		}),
	})

	if (newParamResponse.ok) {
		const newParam = await newParamResponse.json()
		console.log(`‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä —Å–æ–∑–¥–∞–Ω: ${newParam.name} (ID: ${newParam.id})`)
		console.log(`   –ó–Ω–∞—á–µ–Ω–∏–π: ${newParam.values.length}`)

		// Clean up - delete test parameter
		const deleteResponse = await fetch(
			`${BASE_URL}/api/parameters/${newParam.id}`,
			{ method: 'DELETE' }
		)
		if (deleteResponse.ok) {
			console.log(`üóëÔ∏è  –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —É–¥–∞–ª–µ–Ω`)
		}
	} else {
		const error = await newParamResponse.json()
		console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${error.error}`)
	}

	// Summary
	console.log('\n' + '='.repeat(60))
	console.log('üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:')
	console.log(`   ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${parameters.length}`)
	console.log(
		`   ‚úÖ –ó–Ω–∞—á–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ: ${parameters.reduce(
			(acc, p) => acc + (p.values?.length || 0),
			0
		)}`
	)
	console.log(`   ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`)
	console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç`)
	console.log('\nüéâ –°–ò–°–¢–ï–ú–ê –ü–ê–†–ê–ú–ï–¢–†–û–í –ü–û–õ–ù–û–°–¢–¨–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–ê!')
}

testParameterSystem().catch(console.error)
