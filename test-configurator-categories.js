/**
 * –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ö–ê–¢–ï–ì–û–†–ò–ô –° –ö–û–ù–§–ò–ì–£–†–ê–¢–û–†–û–ú
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–µ
 */

const BASE_URL = 'http://localhost:3000'

console.log('üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ö–û–ù–§–ò–ì–£–†–ê–¢–û–†–û–ú\n')
console.log('='.repeat(70))

const logResult = (test, success, details = '') => {
	const icon = success ? '‚úÖ' : '‚ùå'
	console.log(`${icon} ${test}`)
	if (details) console.log(`   ${details}`)
}

const delay = ms => new Promise(resolve => setTimeout(resolve, ms))

// ============================================================================
// –¢–ï–°–¢ 1: –ö–ê–¢–ï–ì–û–†–ò–ò –î–û–°–¢–£–ü–ù–´ –í API
// ============================================================================
async function test1_CategoriesAvailable() {
	console.log('\nüìã –¢–ï–°–¢ 1: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ API')
	console.log('-'.repeat(70))

	try {
		const response = await fetch(`${BASE_URL}/api/product-categories`)
		const categories = await response.json()

		const activeCategories = categories.filter(c => c.isActive)
		const inactiveCategories = categories.filter(c => !c.isActive)

		logResult(
			'–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
			response.ok,
			`–í—Å–µ–≥–æ: ${categories.length}, –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeCategories.length}, –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${inactiveCategories.length}`
		)

		return { success: true, categories, activeCategories }
	} catch (error) {
		logResult('–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', false, error.message)
		return { success: false }
	}
}

// ============================================================================
// –¢–ï–°–¢ 2: –ò–ö–û–ù–ö–ò –ö–ê–¢–ï–ì–û–†–ò–ô
// ============================================================================
async function test2_CategoryIcons() {
	console.log('\nüé® –¢–ï–°–¢ 2: –ò–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
	console.log('-'.repeat(70))

	try {
		const response = await fetch(`${BASE_URL}/api/product-categories`)
		const categories = await response.json()

		let allIconsValid = true
		let invalidIcons = []

		categories.forEach(category => {
			const hasIcon = category.icon && category.icon.length > 0
			const isSvg = category.icon && category.icon.includes('<svg')

			if (!hasIcon || !isSvg) {
				allIconsValid = false
				invalidIcons.push(category.name)
			}
		})

		if (allIconsValid) {
			logResult('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∫–æ–Ω–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π', true, '–í—Å–µ –∏–∫–æ–Ω–∫–∏ –≤–∞–ª–∏–¥–Ω—ã')
		} else {
			logResult(
				'–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∫–æ–Ω–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
				false,
				`–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∏–∫–æ–Ω–∫–∏: ${invalidIcons.join(', ')}`
			)
		}

		return { success: allIconsValid }
	} catch (error) {
		logResult('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∫–æ–Ω–æ–∫', false, error.message)
		return { success: false }
	}
}

// ============================================================================
// –¢–ï–°–¢ 3: –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ê–ö–¢–ò–í–ù–´–• –ö–ê–¢–ï–ì–û–†–ò–ô
// ============================================================================
async function test3_ActiveCategoriesFilter() {
	console.log('\nüëÅÔ∏è –¢–ï–°–¢ 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
	console.log('-'.repeat(70))

	try {
		const response = await fetch(`${BASE_URL}/api/product-categories`)
		const categories = await response.json()

		const activeCategories = categories.filter(c => c.isActive)

		console.log('   –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:')
		activeCategories.forEach(cat => {
			console.log(`     - ${cat.name}`)
		})

		logResult(
			'–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
			true,
			`${activeCategories.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`
		)

		return { success: true, activeCategories }
	} catch (error) {
		logResult('–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è', false, error.message)
		return { success: false }
	}
}

// ============================================================================
// –¢–ï–°–¢ 4: –°–û–ó–î–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò –ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¢–û–†–ê
// ============================================================================
async function test4_CreateFromConfigurator() {
	console.log('\n‚ûï –¢–ï–°–¢ 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞')
	console.log('-'.repeat(70))

	const testCategory = {
		name: 'Configurator_Test_' + Date.now(),
		icon: '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1"><circle cx="12" cy="12" r="10"/></svg>',
		description: '–°–æ–∑–¥–∞–Ω–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞',
	}

	try {
		const createResponse = await fetch(`${BASE_URL}/api/product-categories`, {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(testCategory),
		})

		if (createResponse.ok) {
			const newCategory = await createResponse.json()
			logResult('–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞', true, `ID: ${newCategory.id}`)

			await delay(500)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —Å–ø–∏—Å–∫–µ
			const listResponse = await fetch(`${BASE_URL}/api/product-categories`)
			const categories = await listResponse.json()

			const found = categories.find(c => c.id === newCategory.id)
			logResult(
				'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ',
				!!found,
				found ? found.name : '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'
			)

			// –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
			await fetch(`${BASE_URL}/api/product-categories/${newCategory.id}`, {
				method: 'DELETE',
			})
			console.log('   üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞')

			return { success: true }
		} else {
			const error = await createResponse.json()
			logResult('–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞', false, error.error)
			return { success: false }
		}
	} catch (error) {
		logResult('–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞', false, error.message)
		return { success: false }
	}
}

// ============================================================================
// –¢–ï–°–¢ 5: –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ù–ê–°–¢–†–û–ô–ö–ò ‚Üî –ö–û–ù–§–ò–ì–£–†–ê–¢–û–†
// ============================================================================
async function test5_SettingsConfiguratorSync() {
	console.log('\nüîÑ –¢–ï–°–¢ 5: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üî –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä')
	console.log('-'.repeat(70))

	try {
		// –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
		const settingsResponse = await fetch(`${BASE_URL}/api/product-categories`)
		const settingsCategories = await settingsResponse.json()

		await delay(100)

		// –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞"
		const configuratorResponse = await fetch(
			`${BASE_URL}/api/product-categories`
		)
		const configuratorCategories = await configuratorResponse.json()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã
		const sameLength =
			settingsCategories.length === configuratorCategories.length

		logResult(
			'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç',
			sameLength,
			`–ù–∞—Å—Ç—Ä–æ–π–∫–∏: ${settingsCategories.length}, –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä: ${configuratorCategories.length}`
		)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ ID —Å–æ–≤–ø–∞–¥–∞—é—Ç
		const settingsIds = new Set(settingsCategories.map(c => c.id))
		const configuratorIds = new Set(configuratorCategories.map(c => c.id))

		const allIdsMatch =
			settingsIds.size === configuratorIds.size &&
			[...settingsIds].every(id => configuratorIds.has(id))

		logResult('ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–≤–ø–∞–¥–∞—é—Ç', allIdsMatch)

		return { success: sameLength && allIdsMatch }
	} catch (error) {
		logResult('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è', false, error.message)
		return { success: false }
	}
}

// ============================================================================
// –¢–ï–°–¢ 6: ULTRA-THIN –ò–ö–û–ù–ö–ò
// ============================================================================
async function test6_UltraThinIcons() {
	console.log('\n‚ú® –¢–ï–°–¢ 6: Ultra-thin –∏–∫–æ–Ω–∫–∏')
	console.log('-'.repeat(70))

	try {
		const response = await fetch(`${BASE_URL}/api/product-categories`)
		const categories = await response.json()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç stroke-width="1"
		const newCategories = categories.filter(
			c =>
				c.name.includes('Serramenti') ||
				c.name.includes('Cassonetti') ||
				c.name.includes('Avvolgibile')
		)

		let ultraThinCount = 0
		newCategories.forEach(cat => {
			if (cat.icon.includes('stroke-width="1"')) {
				ultraThinCount++
			}
		})

		logResult(
			'Ultra-thin –∏–∫–æ–Ω–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è',
			ultraThinCount > 0,
			`${ultraThinCount} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å ultra-thin —Å—Ç–∏–ª–µ–º`
		)

		return { success: true }
	} catch (error) {
		logResult('–ü—Ä–æ–≤–µ—Ä–∫–∞ ultra-thin –∏–∫–æ–Ω–æ–∫', false, error.message)
		return { success: false }
	}
}

// ============================================================================
// –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í
// ============================================================================
async function runAllTests() {
	const results = []

	results.push(await test1_CategoriesAvailable())
	await delay(500)

	results.push(await test2_CategoryIcons())
	await delay(500)

	results.push(await test3_ActiveCategoriesFilter())
	await delay(500)

	results.push(await test4_CreateFromConfigurator())
	await delay(500)

	results.push(await test5_SettingsConfiguratorSync())
	await delay(500)

	results.push(await test6_UltraThinIcons())

	// –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	console.log('\n' + '='.repeat(70))
	console.log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´')
	console.log('='.repeat(70))

	const totalTests = results.length
	const passedTests = results.filter(r => r.success).length
	const failedTests = totalTests - passedTests

	console.log(`\n‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}/${totalTests}`)
	console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failedTests}/${totalTests}`)

	if (failedTests === 0) {
		console.log('\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!')
		console.log('‚ú® –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–µ!')
	} else {
		console.log('\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô!')
	}

	console.log('\n' + '='.repeat(70))
}

// –ó–∞–ø—É—Å–∫
runAllTests().catch(error => {
	console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error)
	process.exit(1)
})
