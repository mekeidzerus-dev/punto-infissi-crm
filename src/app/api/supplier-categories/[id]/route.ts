import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

// DELETE - —É–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å –ø–æ—Å—Ç–∞–≤—â–∏–∫-–∫–∞—Ç–µ–≥–æ—Ä–∏—è
export async function DELETE(
	request: NextRequest,
	{ params }: { params: Promise<{ id: string }> }
) {
	try {
		const { id } = await params
		console.log(`üóëÔ∏è Deleting supplier category: ${id}`)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–≤—è–∑—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		const existingSupplierCategory =
			await prisma.supplierProductCategory.findUnique({
				where: { id },
			})

		if (!existingSupplierCategory) {
			console.log(`‚ùå Supplier category not found: ${id}`)
			return NextResponse.json(
				{ error: 'Supplier category not found' },
				{ status: 404 }
			)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —Å–≤—è–∑—å –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö
		const usedInProposals = await prisma.proposalPosition.findFirst({
			where: { supplierCategoryId: id },
		})

		if (usedInProposals) {
			console.log(`‚ö†Ô∏è Cannot delete: supplier category is used in proposals`)
			return NextResponse.json(
				{
					error:
						'–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å: –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏.',
				},
				{ status: 400 }
			)
		}

		// –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å
		await prisma.supplierProductCategory.delete({
			where: { id },
		})

		console.log(`‚úÖ Deleted supplier category: ${id}`)
		return NextResponse.json({ success: true })
	} catch (error) {
		console.error('‚ùå Error deleting supplier category:', error)
		return NextResponse.json(
			{ error: 'Failed to delete supplier category' },
			{ status: 500 }
		)
	}
}
