'use client'

import React from 'react'
import { FeatureGate } from '@/lib/feature-flags'

interface ProductVisualizationProps {
	configuration: {
		parameters: Record<string, any>
		categoryId: string
	}
	category: {
		name: string
	}
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–µ—Ä–Ω—ã—Ö –ª–∏–Ω–∏–π (—É–ª—É—á—à–µ–Ω–Ω—ã–π)
const DimensionLines = ({
	width,
	height,
}: {
	width: number
	height: number
}) => {
	return (
		<>
			{/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è (—à–∏—Ä–∏–Ω–∞) - —Å–Ω–∏–∑—É */}
			<div className='absolute -bottom-10 left-0 right-0'>
				<div className='flex justify-center'>
					<div className='flex items-center'>
						<div className='w-3 h-0.5 bg-blue-500'></div>
						<span className='mx-3 text-sm font-medium text-blue-600'>
							{width} –º–º
						</span>
						<div className='w-3 h-0.5 bg-blue-500'></div>
					</div>
				</div>
			</div>

			{/* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è (–≤—ã—Å–æ—Ç–∞) - —Å–ø—Ä–∞–≤–∞, –¥–∞–ª—å—à–µ */}
			<div className='absolute -right-12 top-0 bottom-0'>
				<div className='flex flex-col justify-center h-full'>
					<div className='flex flex-col items-center'>
						<div className='w-0.5 h-3 bg-blue-500'></div>
						<span
							className='my-3 text-sm font-medium text-blue-600'
							style={{
								writingMode: 'vertical-rl',
								textOrientation: 'mixed',
							}}
						>
							{height} –º–º
						</span>
						<div className='w-0.5 h-3 bg-blue-500'></div>
					</div>
				</div>
			</div>
		</>
	)
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—Ç–∫—Ä—ã—Ç–∏—è –° –£–õ–£–ß–®–ï–ù–ù–´–ú–ò –ò–ù–î–ò–ö–ê–¢–û–†–ê–ú–ò
const renderOpeningPattern = (
	openingType: string,
	openingSide: string = '–í–ª–µ–≤–æ'
) => {
	const type = String(openingType).toLowerCase()
	const side = String(openingSide).toLowerCase()

	// Battente (—Ä–∞—Å–ø–∞—à–Ω–æ–µ) - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–∞—Ä—É–∂—É
	if (type.includes('battente') || type.includes('casement')) {
		const isLeftSide =
			side.includes('–≤–ª–µ–≤–æ') ||
			side.includes('sinistra') ||
			side.includes('left')

		return (
			<div className='absolute inset-0'>
				{/* –ü–µ—Ç–ª–∏ - —Å–ª–µ–≤–∞ –∏–ª–∏ —Å–ø—Ä–∞–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ç–∫—Ä—ã—Ç–∏—è */}
				<div
					className={`absolute ${
						isLeftSide ? 'left-1' : 'right-1'
					} top-1/2 transform -translate-y-1/2`}
				>
					<div className='w-1 h-3 bg-gray-600 rounded-full'></div>
					<div className='w-1 h-3 bg-gray-600 rounded-full mt-1'></div>
					<div className='w-1 h-3 bg-gray-600 rounded-full mt-1'></div>
				</div>

				{/* –°—Ç—Ä–µ–ª–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è */}
				<div
					className={`absolute top-1/2 ${
						isLeftSide ? 'right-2' : 'left-2'
					} transform -translate-y-1/2`}
				>
					<div
						className={`text-blue-600 font-bold text-lg ${
							isLeftSide ? '' : 'transform scale-x-[-1]'
						}`}
					>
						‚Üí
					</div>
				</div>

				{/* –õ–∏–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è */}
				<div
					className={`absolute top-1/2 ${
						isLeftSide ? 'right-1' : 'left-1'
					} transform -translate-y-1/2`}
				>
					<div
						className={`w-8 h-0.5 bg-blue-300 opacity-50 ${
							isLeftSide ? '' : 'transform scale-x-[-1]'
						}`}
					></div>
					<div
						className={`absolute top-0 ${
							isLeftSide ? 'right-0' : 'left-0'
						} w-0 h-0 border-l-4 border-l-blue-300 border-t-2 border-t-transparent border-b-2 border-b-transparent ${
							isLeftSide ? '' : 'transform scale-x-[-1]'
						}`}
					></div>
				</div>
			</div>
		)
	}

	// Ribalta / –ü–æ–≤–æ—Ä–æ—Ç–Ω–æ-–æ—Ç–∫–∏–¥–Ω–æ–µ - –Ω–∞–∫–ª–æ–Ω—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä—å
	if (
		type.includes('ribalta') ||
		type.includes('tilt') ||
		type.includes('–ø–æ–≤–æ—Ä–æ—Ç–Ω–æ')
	) {
		return (
			<div className='absolute inset-0'>
				{/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ—Å—å –ø–æ–≤–æ—Ä–æ—Ç–∞ */}
				<div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2'>
					<div className='w-8 h-8 border-2 border-gray-500 rounded-full bg-gray-200 bg-opacity-50 flex items-center justify-center'>
						<div className='w-2 h-2 bg-gray-500 rounded-full'></div>
					</div>
				</div>

				{/* –°—Ç—Ä–µ–ª–∫–∞ –Ω–∞–∫–ª–æ–Ω–∞ (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞) */}
				<div className='absolute bottom-2 left-1/2 transform -translate-x-1/2'>
					<div className='text-blue-600 font-bold text-lg'>‚Üì</div>
				</div>

				{/* –õ–∏–Ω–∏–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞–∫–ª–æ–Ω–∞ */}
				<div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2'>
					<div className='w-6 h-0.5 bg-blue-300 opacity-50 transform rotate-45'></div>
					<div className='w-6 h-0.5 bg-blue-300 opacity-50 transform -rotate-45'></div>
				</div>
			</div>
		)
	}

	// Scorrevole (—Ä–∞–∑–¥–≤–∏–∂–Ω–æ–µ) - —Å–∫–æ–ª—å–∑–∏—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
	if (
		type.includes('scorrevole') ||
		type.includes('slide') ||
		type.includes('—Ä–∞–∑–¥–≤–∏–∂–Ω–æ–µ')
	) {
		return (
			<div className='absolute inset-0'>
				{/* –ù–∞–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Ä–µ–ª—å—Å—ã */}
				<div className='absolute top-1 left-0 right-0 h-0.5 bg-gray-400'></div>
				<div className='absolute bottom-1 left-0 right-0 h-0.5 bg-gray-400'></div>

				{/* –†–æ–ª–∏–∫–∏ */}
				<div className='absolute top-0.5 left-2'>
					<div className='w-1 h-1 bg-gray-600 rounded-full'></div>
				</div>
				<div className='absolute top-0.5 right-2'>
					<div className='w-1 h-1 bg-gray-600 rounded-full'></div>
				</div>
				<div className='absolute bottom-0.5 left-2'>
					<div className='w-1 h-1 bg-gray-600 rounded-full'></div>
				</div>
				<div className='absolute bottom-0.5 right-2'>
					<div className='w-1 h-1 bg-gray-600 rounded-full'></div>
				</div>

				{/* –°—Ç—Ä–µ–ª–∫–∏ —Å–∫–æ–ª—å–∂–µ–Ω–∏—è (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞) */}
				<div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2'>
					<div className='flex items-center space-x-2'>
						<div className='text-blue-600 font-bold text-sm'>‚Üê</div>
						<div className='text-blue-600 font-bold text-sm'>‚Üí</div>
					</div>
				</div>
			</div>
		)
	}

	// Fisso (–≥–ª—É—Ö–æ–µ) - –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è
	if (
		type.includes('fisso') ||
		type.includes('fixed') ||
		type.includes('–≥–ª—É—Ö–æ–µ')
	) {
		return (
			<div className='absolute inset-0'>
				{/* –ó–∞–≥–ª—É—à–∫–∞ (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞) */}
				<div className='absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2'>
					<div className='text-gray-400 font-bold text-xl'>üîí</div>
				</div>

				{/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
				<div className='absolute top-2 left-2 w-1 h-1 bg-gray-300 rounded-full'></div>
				<div className='absolute top-2 right-2 w-1 h-1 bg-gray-300 rounded-full'></div>
				<div className='absolute bottom-2 left-2 w-1 h-1 bg-gray-300 rounded-full'></div>
				<div className='absolute bottom-2 right-2 w-1 h-1 bg-gray-300 rounded-full'></div>
			</div>
		)
	}

	return null
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
export const ProductVisualizer = ({
	configuration,
	category,
}: ProductVisualizationProps) => {
	const { parameters } = configuration

	// –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–Ω—Å–æ–ª—å
	console.log('üîç ProductVisualizer parameters:', parameters)
	console.log('üîç Parameter keys:', Object.keys(parameters))
	console.log('üîç Parameter values:', Object.values(parameters))

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –ø–æ ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	const getParameterValue = (names: string[]) => {
		for (const [key, value] of Object.entries(parameters)) {
			// –ò—â–µ–º –ø–æ ID –∏–ª–∏ –ø–æ —Å—Ç–∞—Ä–æ–º—É –∫–ª—é—á—É
			if (names.includes(key)) {
				return value
			}
		}
		return null
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ ID
	// –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–º–µ—Ä–∞–º–∏
	const numericValues = Object.values(parameters).filter(
		v => typeof v === 'number' && v > 0
	) as number[]

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞: –º–µ–Ω—å—à–µ–µ = —à–∏—Ä–∏–Ω–∞, –±–æ–ª—å—à–µ–µ = –≤—ã—Å–æ—Ç–∞
	const sortedValues = numericValues.sort((a, b) => a - b)

	const width =
		sortedValues.length >= 1
			? sortedValues[0] >= 400 && sortedValues[0] <= 3000
				? sortedValues[0]
				: 1000
			: 1000
	const height =
		sortedValues.length >= 2
			? sortedValues[1] >= 400 && sortedValues[1] <= 2500
				? sortedValues[1]
				: 2000
			: sortedValues.length === 1 && sortedValues[0] > 1000
			? sortedValues[0] // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ –∏ –æ–Ω–æ –±–æ–ª—å—à–æ–µ, —Å—á–∏—Ç–∞–µ–º –≤—ã—Å–æ—Ç–æ–π
			: 2000

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç–∞ –∏ —Ç–∏–ø –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
	const stringValues = Object.values(parameters).filter(
		v => typeof v === 'string' && v.length > 0
	) as string[]

	// –ò—â–µ–º —Ü–≤–µ—Ç —Ä–∞–º–∫–∏ —Å—Ä–µ–¥–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫)
	const colorKeywords = [
		'Bianco',
		'–ë–µ–ª—ã–π',
		'Marrone',
		'–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π',
		'Antracite',
		'–ê–Ω—Ç—Ä–∞—Ü–∏—Ç',
		'Grigio',
		'–°–µ—Ä—ã–π',
		'Nero',
		'–ß–µ—Ä–Ω—ã–π',
		'Beige',
		'–ë–µ–∂–µ–≤—ã–π',
	]

	const frameColor =
		stringValues.find(color =>
			colorKeywords.some(keyword =>
				color.toLowerCase().includes(keyword.toLowerCase())
			)
		) || 'Bianco'

	// –ò—â–µ–º —Ç–∏–ø –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ä–µ–¥–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫)
	const openingKeywords = [
		'Battente',
		'Ribalta',
		'Scorrevole',
		'Fisso',
		'—Ä–∞—Å–ø–∞—à–Ω–æ–µ',
		'–ø–æ–≤–æ—Ä–æ—Ç–Ω–æ-–æ—Ç–∫–∏–¥–Ω–æ–µ',
		'—Ä–∞–∑–¥–≤–∏–∂–Ω–æ–µ',
		'–≥–ª—É—Ö–æ–µ',
	]

	const openingType =
		stringValues.find(type =>
			openingKeywords.some(keyword =>
				type.toLowerCase().includes(keyword.toLowerCase())
			)
		) || 'Fisso'

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–æ—Ä–æ–Ω—É –æ—Ç–∫—Ä—ã—Ç–∏—è
	const openingSideKeywords = [
		'–≤–ª–µ–≤–æ',
		'–≤–ø—Ä–∞–≤–æ',
		'sinistra',
		'destra',
		'left',
		'right',
	]
	const openingSide =
		stringValues.find(side =>
			openingSideKeywords.some(keyword =>
				side.toLowerCase().includes(keyword.toLowerCase())
			)
		) || '–í–ª–µ–≤–æ'

	const glassColor = '#87CEEB' // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç —Å—Ç–µ–∫–ª–∞

	// –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
	console.log('üìè Extracted width:', width)
	console.log('üìè Extracted height:', height)
	console.log('üé® Extracted frameColor:', frameColor)
	console.log('üîÑ Extracted openingType:', openingType)
	console.log('‚ÜîÔ∏è Extracted openingSide:', openingSide)
	console.log('üî¢ Numeric values:', numericValues)
	console.log('üî¢ Sorted values:', sortedValues)
	console.log('üìù String values:', stringValues)
	console.log(
		'üé® Color keywords found:',
		stringValues.filter(color =>
			colorKeywords.some(keyword =>
				color.toLowerCase().includes(keyword.toLowerCase())
			)
		)
	)
	console.log(
		'üîÑ Opening keywords found:',
		stringValues.filter(type =>
			openingKeywords.some(keyword =>
				type.toLowerCase().includes(keyword.toLowerCase())
			)
		)
	)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º hex —Ü–≤–µ—Ç –¥–ª—è —Ä–∞–º–∫–∏ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	const getHexColor = (colorValue: any) => {
		if (!colorValue) return '#FFFFFF'

		const colorValueStr = String(colorValue).toLowerCase()

		// –ë–µ–ª—ã–π
		if (colorValueStr.includes('bianco') || colorValueStr.includes('–±–µ–ª—ã–π')) {
			return '#FFFFFF'
		}
		// –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π
		if (
			colorValueStr.includes('marrone') ||
			colorValueStr.includes('–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π')
		) {
			return '#8B4513'
		}
		// –ê–Ω—Ç—Ä–∞—Ü–∏—Ç
		if (
			colorValueStr.includes('antracite') ||
			colorValueStr.includes('–∞–Ω—Ç—Ä–∞—Ü–∏—Ç')
		) {
			return '#36454F'
		}
		// –°–µ—Ä—ã–π
		if (colorValueStr.includes('grigio') || colorValueStr.includes('—Å–µ—Ä—ã–π')) {
			return '#808080'
		}
		// –ß–µ—Ä–Ω—ã–π
		if (colorValueStr.includes('nero') || colorValueStr.includes('—á–µ—Ä–Ω—ã–π')) {
			return '#000000'
		}
		// –ë–µ–∂–µ–≤—ã–π
		if (colorValueStr.includes('beige') || colorValueStr.includes('–±–µ–∂–µ–≤—ã–π')) {
			return '#F5F5DC'
		}

		// Fallback
		return '#FFFFFF'
	}

	return (
		<FeatureGate feature='PRODUCT_VISUALIZATION'>
			<div className='bg-gray-50 p-6 rounded-lg'>
				<h3 className='font-semibold mb-4'>–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞</h3>

				<div className='relative'>
					{/* –û—Å–Ω–æ–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è - –¢–û–õ–¨–ö–û –ì–†–ê–§–ò–ö–ê */}
					<div className='relative inline-block'>
						{/* –†–∞–º–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ */}
						<div
							className='border-4 relative'
							style={{
								width: `${Math.min(Number(width) / 10, 300)}px`,
								height: `${Math.min(Number(height) / 10, 200)}px`,
								backgroundColor: getHexColor(frameColor),
								borderColor: getHexColor(frameColor),
							}}
						>
							{/* –°—Ç–µ–∫–ª–æ */}
							<div
								className='absolute inset-2'
								style={{ backgroundColor: glassColor }}
							>
								{/* –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—Ç–∫—Ä—ã—Ç–∏—è */}
								{renderOpeningPattern(openingType, openingSide)}
							</div>

							{/* –†—É—á–∫–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –æ–∫–æ–Ω */}
							{openingType !== 'Fisso' &&
								openingType !== 'fixed' &&
								!openingType.toLowerCase().includes('fisso') && (
									<div className='absolute right-1 top-1/2 transform -translate-y-1/2'>
										<div className='w-1.5 h-4 bg-gray-600 rounded-sm'></div>
										<div className='absolute -right-0.5 top-1/2 transform -translate-y-1/2 w-1 h-1 bg-gray-600 rounded-full'></div>
									</div>
								)}
						</div>

						{/* –†–∞–∑–º–µ—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏ */}
						<DimensionLines width={Number(width)} height={Number(height)} />
					</div>

					{/* –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–ê–Ø –ü–ê–ù–ï–õ–¨ –£–î–ê–õ–ï–ù–ê - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∂–µ –µ—Å—Ç—å —Å–ª–µ–≤–∞ */}
				</div>
			</div>
		</FeatureGate>
	)
}

// Fallback –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (—Å—Ç–∞—Ä–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è)
export const LegacyProductVisualizer = ({
	configuration,
}: {
	configuration: any
}) => {
	return (
		<div className='bg-gray-50 p-4 rounded-lg'>
			<h3 className='font-semibold mb-2'>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞</h3>
			<div className='space-y-1 text-sm'>
				{Object.entries(configuration.parameters || {}).map(([key, value]) => (
					<div key={key} className='flex justify-between'>
						<span className='capitalize'>{key}:</span>
						<span className='font-medium'>{String(value)}</span>
					</div>
				))}
			</div>
		</div>
	)
}
