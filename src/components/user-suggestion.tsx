'use client'

import React, { useState } from 'react'
import { FeatureGate } from '@/lib/feature-flags'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'

interface UserSuggestionProps {
	parameter: {
		id: string
		name: string
		type: string
	}
	category: {
		id: string
		name: string
	}
	supplier?: {
		id: number
		name: string
	}
	onSuggest: (suggestion: {
		type: 'parameter_value'
		parameterId: string
		categoryId: string
		supplierId?: number
		value: string
		description?: string
	}) => Promise<void>
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
export const UserSuggestion = ({
	parameter,
	category,
	supplier,
	onSuggest,
}: UserSuggestionProps) => {
	const [newValue, setNewValue] = useState('')
	const [description, setDescription] = useState('')
	const [isSubmitting, setIsSubmitting] = useState(false)
	const [isSubmitted, setIsSubmitted] = useState(false)

	const handleSuggest = async () => {
		if (!newValue.trim()) return

		setIsSubmitting(true)
		try {
			await onSuggest({
				type: 'parameter_value',
				parameterId: parameter.id,
				categoryId: category.id,
				supplierId: supplier?.id,
				value: newValue.trim(),
				description: description.trim() || undefined,
			})

			setIsSubmitted(true)
			setNewValue('')
			setDescription('')
		} catch (error) {
			console.error('Error submitting suggestion:', error)
		} finally {
			setIsSubmitting(false)
		}
	}

	return (
		<FeatureGate feature='USER_SUGGESTIONS'>
			<Card className='mt-4'>
				<CardHeader>
					<CardTitle className='text-sm'>–ù–µ—Ç –Ω—É–∂–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞?</CardTitle>
				</CardHeader>
				<CardContent>
					{isSubmitted ? (
						<div className='text-center py-4'>
							<div className='text-green-600 mb-2'>‚úÖ</div>
							<p className='text-sm text-gray-600'>
								–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ
							</p>
							<Button
								variant='outline'
								size='sm'
								onClick={() => setIsSubmitted(false)}
								className='mt-2'
							>
								–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ—â–µ
							</Button>
						</div>
					) : (
						<div className='space-y-3'>
							<div>
								<label className='text-sm font-medium text-gray-700'>
									–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è "{parameter.name}"
								</label>
								<Input
									placeholder={`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ...`}
									value={newValue}
									onChange={e => setNewValue(e.target.value)}
									className='mt-1'
								/>
							</div>

							<div>
								<label className='text-sm font-medium text-gray-700'>
									–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
								</label>
								<Textarea
									placeholder='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏...'
									value={description}
									onChange={e => setDescription(e.target.value)}
									className='mt-1'
									rows={2}
								/>
							</div>

							<div className='flex gap-2'>
								<Button
									onClick={handleSuggest}
									disabled={!newValue.trim() || isSubmitting}
									size='sm'
									variant='outline'
								>
									{isSubmitting
										? '–û—Ç–ø—Ä–∞–≤–∫–∞...'
										: 'üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'}
								</Button>
							</div>

							<p className='text-xs text-gray-500'>
								–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å
								–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É
							</p>
						</div>
					)}
				</CardContent>
			</Card>
		</FeatureGate>
	)
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
export const SuggestionStatus = ({ suggestions }: { suggestions: any[] }) => {
	const pendingCount = suggestions.filter(s => s.status === 'pending').length

	if (pendingCount === 0) return null

	return (
		<FeatureGate feature='USER_SUGGESTIONS'>
			<div className='bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4'>
				<div className='flex items-center gap-2'>
					<div className='w-2 h-2 bg-blue-500 rounded-full'></div>
					<span className='text-sm text-blue-700'>
						–£ –≤–∞—Å {pendingCount} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
					</span>
				</div>
			</div>
		</FeatureGate>
	)
}

// API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
export const suggestionAPI = {
	// –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
	async createSuggestion(suggestion: {
		type: string
		parameterId: string
		categoryId: string
		supplierId?: number
		value: string
		description?: string
	}) {
		const response = await fetch('/api/user-suggestions', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(suggestion),
		})

		if (!response.ok) {
			throw new Error('Failed to create suggestion')
		}

		return response.json()
	},

	// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	async getUserSuggestions(sessionId: string) {
		const response = await fetch(`/api/user-suggestions?sessionId=${sessionId}`)

		if (!response.ok) {
			throw new Error('Failed to fetch suggestions')
		}

		return response.json()
	},

	// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
	async checkDuplication(value: string, parameterId: string) {
		const response = await fetch(`/api/user-suggestions/check-duplication`, {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ value, parameterId }),
		})

		if (!response.ok) {
			throw new Error('Failed to check duplication')
		}

		return response.json()
	},
}
