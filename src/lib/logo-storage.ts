import { promises as fs } from 'fs'
import path from 'path'
import crypto from 'crypto'
import sharp from 'sharp'

export interface LogoStorageResult {
	success: boolean
	path?: string
	error?: string
	metadata?: {
		hash: string
		fileName: string
		optimizedSize?: number
	}
}

export interface CleanupResult {
	deleted: number
	kept: number
	errors: number
}

// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤
const LOGO_DIR = path.join(process.cwd(), 'public', 'logos')

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
async function ensureLogoDirectory() {
	try {
		await fs.mkdir(LOGO_DIR, { recursive: true })
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤:', error)
	}
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å —Ö–µ—à–µ–º
function generateLogoFileName(buffer: Buffer, originalName: string): string {
	const hash = crypto.createHash('md5').update(buffer).digest('hex').slice(0, 8)
	const ext = path.extname(originalName).toLowerCase()

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
	let format = ext
	if (ext === '.jpg') format = '.jpeg'
	if (ext === '.svg') format = '.svg'

	return `logo-${hash}${format}`
}

export async function saveLogoFile(
	buffer: Buffer,
	originalName: string
): Promise<LogoStorageResult> {
	try {
		await ensureLogoDirectory()

		const fileName = generateLogoFileName(buffer, originalName)
		const filePath = path.join(LOGO_DIR, fileName)
		const publicPath = `/logos/${fileName}`

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ñ–∞–π–ª
		try {
			await fs.access(filePath)
			// –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –ø—É—Ç—å
			return {
				success: true,
				path: publicPath,
				metadata: {
					hash: fileName.split('-')[1].split('.')[0],
					fileName,
				},
			}
		} catch {
			// –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
		}

		// –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±–∞ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ SVG)
		let optimizedBuffer = buffer
		let optimizedSize = buffer.length

		if (!originalName.toLowerCase().endsWith('.svg')) {
			try {
				optimizedBuffer = await sharp(buffer)
					.resize(350, 100, {
						fit: 'inside',
						withoutEnlargement: true,
						background: { r: 255, g: 255, b: 255, alpha: 0 },
					})
					.png({ quality: 90, compressionLevel: 6 })
					.toBuffer()

				optimizedSize = optimizedBuffer.length
				console.log(
					`–õ–æ–≥–æ—Ç–∏–ø –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω: ${buffer.length} ‚Üí ${optimizedSize} –±–∞–π—Ç`
				)
			} catch (error) {
				console.warn(
					'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª:',
					error
				)
			}
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
		await fs.writeFile(filePath, optimizedBuffer)

		console.log(`‚úÖ –õ–æ–≥–æ—Ç–∏–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${fileName}`)

		return {
			success: true,
			path: publicPath,
			metadata: {
				hash: fileName.split('-')[1].split('.')[0],
				fileName,
				optimizedSize,
			},
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞:', error)
		return {
			success: false,
			error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
		}
	}
}

export async function cleanupOldLogos(): Promise<CleanupResult> {
	try {
		await ensureLogoDirectory()

		const files = await fs.readdir(LOGO_DIR)
		const logoFiles = files.filter(file => file.startsWith('logo-'))

		let deleted = 0
		let errors = 0

		for (const file of logoFiles) {
			try {
				const filePath = path.join(LOGO_DIR, file)
				await fs.unlink(filePath)
				deleted++
				console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥–æ—Ç–∏–ø: ${file}`)
			} catch (error) {
				console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${file}:`, error)
				errors++
			}
		}

		return {
			deleted,
			kept: 0,
			errors,
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤:', error)
		return {
			deleted: 0,
			kept: 0,
			errors: 1,
		}
	}
}

export async function optimizeLogoStorage(
	maxVersions: number
): Promise<CleanupResult> {
	try {
		await ensureLogoDirectory()

		const files = await fs.readdir(LOGO_DIR)
		const logoFiles = files.filter(file => file.startsWith('logo-'))

		if (logoFiles.length <= maxVersions) {
			return {
				deleted: 0,
				kept: logoFiles.length,
				errors: 0,
			}
		}

		// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
		const filesWithStats = await Promise.all(
			logoFiles.map(async file => {
				const filePath = path.join(LOGO_DIR, file)
				const stats = await fs.stat(filePath)
				return { file, mtime: stats.mtime }
			})
		)

		filesWithStats.sort((a, b) => b.mtime.getTime() - a.mtime.getTime())

		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
		const filesToDelete = filesWithStats.slice(maxVersions)
		let deleted = 0
		let errors = 0

		for (const { file } of filesToDelete) {
			try {
				const filePath = path.join(LOGO_DIR, file)
				await fs.unlink(filePath)
				deleted++
				console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥–æ—Ç–∏–ø: ${file}`)
			} catch (error) {
				console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${file}:`, error)
				errors++
			}
		}

		return {
			deleted,
			kept: maxVersions,
			errors,
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤:', error)
		return {
			deleted: 0,
			kept: 0,
			errors: 1,
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞
export async function getCurrentLogo(): Promise<string | null> {
	try {
		await ensureLogoDirectory()

		const files = await fs.readdir(LOGO_DIR)
		const logoFiles = files.filter(file => file.startsWith('logo-'))

		if (logoFiles.length === 0) {
			return null
		}

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
		const filesWithStats = await Promise.all(
			logoFiles.map(async file => {
				const filePath = path.join(LOGO_DIR, file)
				const stats = await fs.stat(filePath)
				return { file, mtime: stats.mtime }
			})
		)

		filesWithStats.sort((a, b) => b.mtime.getTime() - a.mtime.getTime())
		return `/logos/${filesWithStats[0].file}`
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞:', error)
		return null
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏ (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
export async function generatePrintLogo(buffer: Buffer): Promise<Buffer> {
	try {
		return await sharp(buffer)
			.resize(350, 100, {
				fit: 'inside',
				withoutEnlargement: true,
				background: { r: 255, g: 255, b: 255, alpha: 1 }, // –ë–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –ø–µ—á–∞—Ç–∏
			})
			.png({ quality: 100, compressionLevel: 0 })
			.toBuffer()
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏:', error)
		throw error
	}
}
